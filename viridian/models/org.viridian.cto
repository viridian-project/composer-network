/*
 * Licensed under the GNU General Public License, Version 3 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * https://www.gnu.org/licenses/
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Write your model definitions here
 */

namespace org.viridian

/********
  USERS
*********/

abstract participant User identified by id {
  o String id
  o String email regex=/^[a-zA-Z0-9.!#$%&'*+\-\/=?^_`{|}~]+@[a-zA-Z0-9.!#$%&'*+\-\/=?^_`{|}~]+$/ // try to match all allowed email address characters according to https://stackoverflow.com/questions/2049502/what-characters-are-allowed-in-an-email-address
  /* email address required and must be unique and verified, shall not
     be visible on platform; TODO: perhaps only store the hash, but then
     we cannot simply contact the user; maybe store email address on private channel that only admins can access? */
  o String name regex=/^[a-zA-Z0-9_\-.~|\/]+$/ // username shown publicly on platform, must be unique
  o DateTime createdAt
  o String passwordHash
  o DateTime timestampPassword
  o Integer reputation default=0
  o String avatarUrl optional // URL to potentially external avatar image
}

participant Person extends User {
  /* Personal users (individual persons) are identified by checking that they
     possess a valid identification card or passport. The hash of the
     passport number is stored to ensure that the person holding this
     passport is only registered under a single account (in computer
     science terms, to avoid a "Sybil attack").
     It would be good to have an automated passport validation, for
     scalability when the number of users becomes very high. If this is
     feasible remains to be seen.
  */
  o String firstName optional // if user wants, they can enter their real name
  o String lastName optional // if user wants, they can enter their real name
  o String country // ISO county code (obligatory because passport number must be unique in each county)
  o String passportNrHash /* the hash of the passport number to make sure
  that this person only participates under one account */
}

/* NGOs and other organizations can have verified 'official' accounts */
participant Organization extends User {
  /* Organizations are verified by if they use an email address
     registered under their official domain name, ideally an official
     contact address listed on the organization's web pages.
     If they prove that they can access this official email account,
     they are considered valid. There is no need to validate a
     passport of an individual member of the organization.
     The check can and should probably be performed by a human.
  */
  o String orgName // what is the full official name of the organization?
  o String url // URL of the website of the org., where the used email address should be listed
  o String country optional // ISO country code (just for information)
  o String address optional // where is this organization located?
}

/*******************
  GENERAL CONCEPTS
********************/

enum Status {
  o PRELIMINARY
  o ACTIVE
  o OUTDATED
}

concept Score {
  o Integer environment range=[-100,100] // air pollution, water pollution, ground pollution, waste, toxic substances released into environment etc., without GHG gases
  o Integer climate range=[-100,100] // emission of GHG gases and other climate-active actions like land-use change
  o Integer society range=[-100,100] // working conditions, fair pay, workers' health, child labor, equity, treatment of suppliers, impact on society like charitable projects
  o Integer health range=[-100,100] // impact on consumer's health, e.g. sugar and fat content in food or toxic substances in textiles or toys, acting on consumer
  o Integer economy range=[-100,100] // in the sense of 'value for money', longevity of product, price/performance ratio, is price too high because of the psychologically developed brand image? how economical is product for consumer?
}

/*********
  LABELS
**********/

concept LabelLocaleData {
  o String lang
  o String name
  o String description optional
  o String url optional
  o String[] categories
}

asset Label identified by id {
  o String id
  --> User createdBy
  o DateTime createdAt
  --> User updatedBy
  o DateTime updatedAt
  o LabelLocaleData[] locales
  o String version optional
  o Score score // shall be recalculated when any information changes
  o Status status default="PRELIMINARY"
}

/************
  PRODUCERS
*************/

asset Producer identified by id {
  o String id
  o String name
  o String address optional
  o String url optional
  --> User createdBy
  o DateTime createdAt
  --> User updatedBy
  o DateTime updatedAt
  --> Label[] labels
  o Score score // shall be recalculated when any information changes
  o Status status default="PRELIMINARY"
}

/***********
  PRODUCTS
************/

concept ProductLocaleData {
  o String lang // ISO language code, there should be only one locale data for each language
  o String name // product 'short name'
  o String price optional
  o String currency optional
  o String description optional // product 'long name' or the bottom licenses
  o String quantity optional // how much contained in one package?
  o String ingredients optional
  o String[] packaging
  o String[] categories
  o String imageUrl optional // URL to potentially external product image
  o String url optional // URL to producer website
}

asset Product identified by id {
  o String id
  o String gtin optional // Global Trade Item Number, i.e. barcode, product may not have one
  --> User createdBy
  o DateTime createdAt
  --> User updatedBy
  o DateTime updatedAt
  --> Producer producer
  --> Product[] containedProducts
  --> Label[] labels
  --> ProductLocaleData[] locales
  o Score score // shall be recalculated when any information changes
  o Status status default="PRELIMINARY"
}
